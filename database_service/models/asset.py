# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from database_service.models.base_model_ import Model
from database_service import util


class Asset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, timestamp: float=None, asset_id: int=None, open: float=None, close: float=None, high: float=None, low: float=None, volume: float=None, marketcap: float=None):  # noqa: E501
        """Asset - a model defined in Swagger

        :param timestamp: The timestamp of this Asset.  # noqa: E501
        :type timestamp: float
        :param asset_id: The asset_id of this Asset.  # noqa: E501
        :type asset_id: int
        :param open: The open of this Asset.  # noqa: E501
        :type open: float
        :param close: The close of this Asset.  # noqa: E501
        :type close: float
        :param high: The high of this Asset.  # noqa: E501
        :type high: float
        :param low: The low of this Asset.  # noqa: E501
        :type low: float
        :param volume: The volume of this Asset.  # noqa: E501
        :type volume: float
        :param marketcap: The marketcap of this Asset.  # noqa: E501
        :type marketcap: float
        """
        self.swagger_types = {
            'timestamp': float,
            'asset_id': int,
            'open': float,
            'close': float,
            'high': float,
            'low': float,
            'volume': float,
            'marketcap': float
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'asset_id': 'assetId',
            'open': 'open',
            'close': 'close',
            'high': 'high',
            'low': 'low',
            'volume': 'volume',
            'marketcap': 'marketcap'
        }
        self._timestamp = timestamp
        self._asset_id = asset_id
        self._open = open
        self._close = close
        self._high = high
        self._low = low
        self._volume = volume
        self._marketcap = marketcap

    @classmethod
    def from_dict(cls, dikt) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Asset of this Asset.  # noqa: E501
        :rtype: Asset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> float:
        """Gets the timestamp of this Asset.


        :return: The timestamp of this Asset.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: float):
        """Sets the timestamp of this Asset.


        :param timestamp: The timestamp of this Asset.
        :type timestamp: float
        """

        self._timestamp = timestamp

    @property
    def asset_id(self) -> int:
        """Gets the asset_id of this Asset.


        :return: The asset_id of this Asset.
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id: int):
        """Sets the asset_id of this Asset.


        :param asset_id: The asset_id of this Asset.
        :type asset_id: int
        """

        self._asset_id = asset_id

    @property
    def open(self) -> float:
        """Gets the open of this Asset.


        :return: The open of this Asset.
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open: float):
        """Sets the open of this Asset.


        :param open: The open of this Asset.
        :type open: float
        """

        self._open = open

    @property
    def close(self) -> float:
        """Gets the close of this Asset.


        :return: The close of this Asset.
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close: float):
        """Sets the close of this Asset.


        :param close: The close of this Asset.
        :type close: float
        """

        self._close = close

    @property
    def high(self) -> float:
        """Gets the high of this Asset.


        :return: The high of this Asset.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high: float):
        """Sets the high of this Asset.


        :param high: The high of this Asset.
        :type high: float
        """

        self._high = high

    @property
    def low(self) -> float:
        """Gets the low of this Asset.


        :return: The low of this Asset.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low: float):
        """Sets the low of this Asset.


        :param low: The low of this Asset.
        :type low: float
        """

        self._low = low

    @property
    def volume(self) -> float:
        """Gets the volume of this Asset.


        :return: The volume of this Asset.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume: float):
        """Sets the volume of this Asset.


        :param volume: The volume of this Asset.
        :type volume: float
        """

        self._volume = volume

    @property
    def marketcap(self) -> float:
        """Gets the marketcap of this Asset.


        :return: The marketcap of this Asset.
        :rtype: float
        """
        return self._marketcap

    @marketcap.setter
    def marketcap(self, marketcap: float):
        """Sets the marketcap of this Asset.


        :param marketcap: The marketcap of this Asset.
        :type marketcap: float
        """

        self._marketcap = marketcap
