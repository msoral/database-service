openapi: 3.0.1
info:
  title: Database Service
  description: |
    Use this service to interact with the database. Always send the exchange name in the header of the request. All get/delete requests parameters are query parameters. All post/put request parameters are sent in the body of the request in json format.
  contact:
    email: m.oral@blueflow.ai
  version: 1.0.0
servers:
- url: localhost://12932/database_service/v1
tags:
- name: asset
  description: All info about assets
- name: order
  description: Fetch and create entries of given orders
- name: wallet
  description: For fetching information about current holdings
paths:
  /assets:
    get:
      tags:
      - asset
      summary: List assets of an exchange
      operationId: apiasset_fetch_metadata
      parameters:
      - name: exchange_name
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - binance
          - interactiveBrokers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assets'
      x-openapi-router-controller: database_service.controllers.asset_controller
  /assets/price:
    get:
      tags:
      - asset
      summary: Returns ochlv + market cap values for an asset.
      operationId: apiasset_fetch_price
      parameters:
      - name: exchange_name
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - binance
          - interactiveBrokers
      - name: id
        in: query
        description: Use /assets endpoint to get the id of the asset.
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: start_date
        in: query
        description: |
          Must be used together with `end_date`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: end_date
        in: query
        description: |
          Must be used together with `start_date`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Asset'
                x-content-type: application/json
        "404":
          description: Did not find the specified asset id.
      x-openapi-router-controller: database_service.controllers.asset_controller
    post:
      tags:
      - asset
      summary: Create a new asset object
      description: "**Warning**: This endpoint creates an entry in the database.\n"
      operationId: apiasset_insert_price
      requestBody:
        description: Placeholder description
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "400":
          description: Make sure all values are entered with correct dtypes.
      x-openapi-router-controller: database_service.controllers.asset_controller
  /assets/indicators:
    get:
      tags:
      - asset
      summary: Returns technical indicators of a given asset for the specified timeperiod.
      operationId: apiasset_fetch_indicators
      parameters:
      - name: exchange_name
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - binance
          - interactiveBrokers
      - name: id
        in: query
        description: Use /assets endpoint to get the id of the asset.
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: start_date
        in: query
        description: |
          Must be used together with `end_date`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: end_date
        in: query
        description: |
          Must be used together with `start_date`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AssetIndicators'
                x-content-type: application/json
        "404":
          description: Did not find the specified asset id.
      x-openapi-router-controller: database_service.controllers.asset_controller
  /orders:
    get:
      tags:
      - order
      summary: Fetch order entry
      operationId: apiorder_fetch_order
      parameters:
      - name: exchange_name
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - binance
          - interactiveBrokers
      - name: id
        in: query
        description: Use /assets endpoint to get the id of the asset.
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: start_date
        in: query
        description: |
          Must be used together with `end_date`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: end_date
        in: query
        description: |
          Must be used together with `start_date`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
      x-openapi-router-controller: database_service.controllers.order_controller
    post:
      tags:
      - order
      summary: Create new order entry
      operationId: apiorder_insert_order
      parameters:
      - name: exchange_name
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - binance
          - interactiveBrokers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "201":
          description: Created new order entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
        "400":
          description: Bad request body
      x-openapi-router-controller: database_service.controllers.order_controller
  /orders/by_id:
    get:
      tags:
      - order
      summary: Fetch order by its id
      operationId: apiorder_fetch_order_by_id
      parameters:
      - name: exchange_name
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - binance
          - interactiveBrokers
      - name: order_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      x-openapi-router-controller: database_service.controllers.order_controller
  /wallet:
    get:
      tags:
      - wallet
      summary: Get current portfolio holdings
      operationId: apiwallet_fetch_holdings
      responses:
        "200":
          description: All quantities are in their respective asset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-openapi-router-controller: database_service.controllers.wallet_controller
  /wallet/funds:
    get:
      tags:
      - wallet
      summary: Get amount of available funds
      operationId: apiwallet_fetch_funds
      responses:
        "200":
          description: Requested data is in USD
          content:
            application/json:
              schema:
                type: number
                format: float
                example: 18203.5
                x-content-type: application/json
      x-openapi-router-controller: database_service.controllers.wallet_controller
  /wallet/total:
    get:
      tags:
      - wallet
      summary: Get dollar equavalent of current holdings.
      operationId: apiwallet_fetch_total
      responses:
        "200":
          description: Requested data is in USD
          content:
            application/json:
              schema:
                type: number
                format: float
                example: 18203.5
                x-content-type: application/json
      x-openapi-router-controller: database_service.controllers.wallet_controller
components:
  schemas:
    Assets:
      type: array
      items:
        $ref: '#/components/schemas/AssetMetadata'
    AssetMetadata:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ticker:
          type: string
        website:
          type: string
        social_links:
          type: object
          additionalProperties:
            type: string
          example:
            twitter: ""
            reddit: ""
            facebook: ""
      example:
        ticker: ticker
        website: website
        social_links:
          twitter: ""
          reddit: ""
          facebook: ""
        name: name
        id: 0
    Asset:
      type: object
      properties:
        timestamp:
          type: number
          format: float
          example: 1616414075.621394
        assetId:
          type: integer
          format: int64
          example: 1
        open:
          type: number
          format: float
          example: 45832.12
        close:
          type: number
          format: float
          example: 46132.12
        high:
          type: number
          format: float
          example: 48132.12
        low:
          type: number
          format: float
          example: 40122.12
        volume:
          type: number
          format: float
        marketcap:
          type: number
          format: float
      description: Use `GET /assets` to find asset id.
      example:
        volume: 0.8008282
        marketcap: 6.0274563
        high: 48132.12
        low: 40122.12
        assetId: 1
        close: 46132.12
        open: 45832.12
        timestamp: 1616414075.621394
    AssetIndicators:
      type: object
      properties:
        timestamp:
          type: number
          format: float
          example: 1616414075.621394
        assetId:
          type: integer
          format: int64
          example: 1
      additionalProperties:
        type: number
        format: float
    Orders:
      type: object
      properties:
        ticker:
          type: string
          example: TSLA
      additionalProperties:
        $ref: '#/components/schemas/Order'
    Order:
      type: object
      properties:
        id:
          type: string
          description: Autogenerated uuid of the order
          format: uuid
        timestamp:
          type: number
          format: float
        symbol:
          type: string
        status:
          type: string
        side:
          type: string
        order_type:
          type: object
        quantity:
          type: number
        timeInForce:
          type: string
        price:
          type: integer
        stop_price:
          type: integer
        optional_parameters:
          type: object
          additionalProperties: true
      example:
        symbol: symbol
        side: side
        quantity: 6.027456183070403
        stop_price: 5
        optional_parameters: ""
        price: 1
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        order_type: {}
        timeInForce: timeInForce
        timestamp: 0.8008282
        status: status
    inline_response_201:
      type: object
      properties:
        timestamp:
          type: number
          description: Timestamp of the price data in milliseconds.
          format: float
      example:
        timestamp: 0.8008282
    inline_response_201_1:
      type: object
      properties:
        id:
          type: string
          description: Autogenerated uuid for the order
          format: uuid
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    inline_response_200:
      type: object
      properties:
        timestamp:
          type: number
          format: float
        assets:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_assets'
      example:
        assets:
        - ticker: ticker
          quantity: 6.027456183070403
        - ticker: ticker
          quantity: 6.027456183070403
        timestamp: 0.8008282
    inline_response_200_assets:
      type: object
      properties:
        ticker:
          type: string
        quantity:
          type: number
          format: double
      example:
        ticker: ticker
        quantity: 6.027456183070403
  responses:
    Wallet:
      description: All quantities are in their respective asset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200'
    SingleNumber:
      description: Requested data is in USD
      content:
        application/json:
          schema:
            type: number
            format: float
            example: 18203.5
            x-content-type: application/json
  parameters:
    exchange:
      name: exchange_name
      in: header
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum:
        - binance
        - interactiveBrokers
    asset_id:
      name: id
      in: query
      description: Use /assets endpoint to get the id of the asset.
      required: true
      style: form
      explode: true
      schema:
        type: integer
        format: int64
    start_date:
      name: start_date
      in: query
      description: |
        Must be used together with `end_date`.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
    end_date:
      name: end_date
      in: query
      description: |
        Must be used together with `start_date`.
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date

