openapi: 3.0.3
info:
  x-api-id: 4ec2c107-2a83-42a8-9c31-f09568043382
  title: Database Service API
  description: >
    This api follows the guidelines specified in this [link](https://opensource.zalando.com/restful-api-guidelines/#).
    Use this service to interact with the database. All get/delete requests parameters are query parameters.
    All post/put request parameters are sent in the body of the request in json format.
    `start_date` and `end_date` parameters expect datetime values that comply with ISO 8601.
  version: "1.0.0"
  contact:
    email: m.oral@blueflow.ai


servers:
  - url: http://localhost:8080
    description: For testing purposes
  - url: http://database_service:44890
    description: Use this when deployed with docker compose

tags:
  - name: asset
    description: All info about assets
  - name: order
    description: Fetch and create entries of given orders
  - name: wallet
    description: For fetching information about current holdings

# Paths supported by the server application
paths:
  /{exchange}/assets:
    parameters:
      - $ref: "#/components/parameters/exchange"
    post:
      tags:
        - asset
      operationId: insert_asset
      summary: Create a new asset, provide as many social links as possible.
      description: >
        Please do not send asset_id, it will be **ignored** and generated automatically.
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: "#/components/schemas/AssetMetadata"
      responses:
        201:
          description: Created, id is in response
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
      x-openapi-router-controller: src.api.controllers.assets


    get:
      tags:
        - asset
      operationId: fetch_asset
      summary: Returns a list of asset metadata.
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetMetadata"
      x-openapi-router-controller: src.api.controllers.assets

  /{exchange}/assets/price:
    parameters:
      - $ref: "#/components/parameters/exchange"
    get:
      tags:
        - asset
      operationId: fetch_price
      summary: Returns ochlv + market cap values for an asset.
      parameters:
        - $ref: "#/components/parameters/asset_id"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: "#/components/schemas/Asset"
        404:
          description: Did not find the specified asset id.
      x-openapi-router-controller: src.api.controllers.assets

    post:
      tags:
        - asset
      operationId: insert_price
      summary: Create new price data entry for an asset.
      requestBody:
        description: >
          Please do not send asset_id, it will be **ignored** and generated automatically.
        required: true
        content:
          application/json:
            schema:
             $ref: "#/components/schemas/Asset"
      responses:
        201:
          $ref: "#/components/responses/Created"
        400:
          description: Make sure all values are entered with correct dtypes.
      x-openapi-router-controller: src.api.controllers.assets

  /{exchange}/assets/indicators:
    parameters:
      - $ref: "#/components/parameters/exchange"
    get:
      tags:
        - asset
      operationId: fetch_indicators
      summary: Returns technical indicators of a given asset for the specified timeperiod.
      parameters:
        - $ref: "#/components/parameters/asset_id"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  asset_id:
                    type: number
                  indicators:
                    type: array
                    items:
                      $ref: "#/components/schemas/AssetIndicators"

        404:
          description: Did not find the specified asset id.
      x-openapi-router-controller: src.api.controllers.assets

  /{exchange}/orders:
    parameters:
      - $ref: "#/components/parameters/exchange"
    post:
      tags:
        - order
      operationId: insert_order
      summary: Create new order entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        201:
          $ref: '#/components/responses/CreatedWithId'
        400:
          description: Bad request body
      x-openapi-router-controller: src.api.controllers.orders

    get:
      tags:
        - order
      operationId: fetch_order
      summary: Fetch order entry
      parameters:
        - $ref: "#/components/parameters/asset_id"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticker:
                    type: string
                    example: TSLA
                additionalProperties:
                  $ref: "#/components/schemas/Order"
      x-openapi-router-controller: src.api.controllers.orders

  /{exchange}/orders/by_id:
    parameters:
      - $ref: "#/components/parameters/exchange"
    get:
      tags:
        - order
      operationId: fetch_order_by_id
      summary: Fetch order by its id
      parameters:
        - $ref: "#/components/parameters/order_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
      x-openapi-router-controller: src.api.controllers.orders

  /{exchange}/wallet:
    parameters:
      - $ref: "#/components/parameters/exchange"
      - $ref: "#/components/parameters/asset_id_optional"
      - $ref: "#/components/parameters/start_date"
      - $ref: "#/components/parameters/end_date"
    get:
      tags:
        - wallet
      operationId: fetch_holdings
      summary: Get portfolio holdings
      description: >
        If no parameter is specified returns the current portfolio holdings. Otherwise returns portfolio history with given dates
        and/or for a given asset. **Note: Multiple asset ids are not supported at this time.**
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
      x-openapi-router-controller: src.api.controllers.wallet

  /{exchange}/wallet/cost:
    parameters:
      - $ref: "#/components/parameters/exchange"
      - $ref: "#/components/parameters/asset_id_optional"
    get:
      tags:
        - wallet
      operationId: fetch_cost
      summary: Get average cost
      description: Returns the average cost of an asset. If no asset id is provided, returns the average cost of the wallet.
      responses:
        200:
          $ref: "#/components/responses/SingleNumber"
      x-openapi-router-controller: src.api.controllers.wallet

components:
  parameters:
    exchange:
      name: exchange
      in: path
      description: select the exchange
      required: true
      schema:
        type: string
        enum:
          - binance
          - interactive_brokers
    
    order_id:
      name: order id
      in: query
      required: true
      schema:
        type: string
        format: uuid

    asset_id:
      name: asset_id
      in: query
      description: Use /assets endpoint to get the id of the asset.
      required: True
      schema:
        type: integer
        format: int64

    asset_id_optional:
      name: asset_id
      in: query
      description: Use /assets endpoint to get the id of the asset.
      schema:
        type: integer
        format: int64

    start_date:
      name: start_date
      in: query
      schema:
        type: string
        format: date
      description: >
        Must be used together with `end_date`.

    end_date:
      name: end_date
      in: query
      schema:
        type: string
        format: date
      description: >
        Must be used together with `start_date`.

  schemas:
    AssetMetadata:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ticker:
          type:
            string
        website:
          type: string
        links:
          type: object
          additionalProperties:
            type: string
          example:
            twitter: ""
            reddit: ""
            facebook: ""

    Asset:
      type: object
      description: Use `GET {exchange}/assets` to find asset id.
      properties:
        timestamp:
          type: number
          format: float
          example: 1616414075.621394
        assetId:
          type: integer
          format: int64
          example: 1 # Bitcoin for binance exchange
        open:
          type: number
          format: float
          example: 45832.12
        close:
          type: number
          format: float
          example: 46132.12
        high:
          type: number
          format: float
          example: 48132.12
        low:
          type: number
          format: float
          example: 40122.12
        volume:
          type: number
          format: float
          example: 52,315,960,906
        marketcap:
          type: number
          format: float
          example: 1,081,744,124,778

    AssetIndicators:
      type: object
      properties:
        timestamp:
          type: number
          format: float
          example: 1616414075.621394
      additionalProperties:
        type: number
        format: float

    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 1001
        message:
          type: string
          example: Unexpected keywords in request body

    Id:
      title: id
      type: object
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          title: id
          type: string

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Autogenerated uuid of the order
        timestamp:
          type: number
          format: float
        symbol:
          type: string
        status:
          type: string
        side:
          type: string
        order_type:
          type: object
        quantity:
          type: number
        timeInForce:
          type: string
        price:
          type: integer
        stop_price:
          type: integer
        optional_parameters:
          type: object
          additionalProperties: true

    Wallet:
      title: Wallet
      type: object
      example:
        datetime: 2000-01-23T04:56:07.000+00:00
        assets:
        - quantity: 0.8008281904610115
          cost: 6.027456183070403
          name: name
        - quantity: 0.8008281904610115
          cost: 6.027456183070403
          name: name
      properties:
        datetime:
          format: date-time
          title: datetime
          type: string
        assets:
          items:
            $ref: '#/components/schemas/WalletAssets'
          title: assets
          type: array

    WalletAssets:
      title: WalletAssets
      type: object
      example:
        quantity: 0.8008281904610115
        cost: 6.027456183070403
        name: name
      properties:
        name:
          title: name
          type: string
        quantity:
          format: double
          title: quantity
          type: number
        cost:
          format: double
          title: cost
          type: number

  responses:
    Created:
      description: Created successfully.

    CreatedWithId:
      description: Created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Id"

    SingleNumber:
      description: Requested data is in USD
      content:
        application/json:
          schema:
            type: number
            format: float
            example: 18203.50

    NotFound:
      description: The object you were was not found.
    FallbackError:
      description: An unexpected error occurred.


