# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.api.models.base_model_ import Model
from src.api import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, timestamp=None, symbol=None, status=None, side=None, order_type=None, quantity=None, time_in_force=None, price=None, stop_price=None, optional_parameters=None):  # noqa: E501
        """Order - a model defined in OpenAPI

        :param id: The id of this Order.  # noqa: E501
        :type id: str
        :param timestamp: The timestamp of this Order.  # noqa: E501
        :type timestamp: float
        :param symbol: The symbol of this Order.  # noqa: E501
        :type symbol: str
        :param status: The status of this Order.  # noqa: E501
        :type status: str
        :param side: The side of this Order.  # noqa: E501
        :type side: str
        :param order_type: The order_type of this Order.  # noqa: E501
        :type order_type: object
        :param quantity: The quantity of this Order.  # noqa: E501
        :type quantity: float
        :param time_in_force: The time_in_force of this Order.  # noqa: E501
        :type time_in_force: str
        :param price: The price of this Order.  # noqa: E501
        :type price: int
        :param stop_price: The stop_price of this Order.  # noqa: E501
        :type stop_price: int
        :param optional_parameters: The optional_parameters of this Order.  # noqa: E501
        :type optional_parameters: Dict[str, object]
        """
        self.openapi_types = {
            'id': str,
            'timestamp': float,
            'symbol': str,
            'status': str,
            'side': str,
            'order_type': object,
            'quantity': float,
            'time_in_force': str,
            'price': int,
            'stop_price': int,
            'optional_parameters': Dict[str, object]
        }

        self.attribute_map = {
            'id': 'id',
            'timestamp': 'timestamp',
            'symbol': 'symbol',
            'status': 'status',
            'side': 'side',
            'order_type': 'order_type',
            'quantity': 'quantity',
            'time_in_force': 'timeInForce',
            'price': 'price',
            'stop_price': 'stop_price',
            'optional_parameters': 'optional_parameters'
        }

        self._id = id
        self._timestamp = timestamp
        self._symbol = symbol
        self._status = status
        self._side = side
        self._order_type = order_type
        self._quantity = quantity
        self._time_in_force = time_in_force
        self._price = price
        self._stop_price = stop_price
        self._optional_parameters = optional_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Order.

        Autogenerated uuid of the order  # noqa: E501

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        Autogenerated uuid of the order  # noqa: E501

        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this Order.


        :return: The timestamp of this Order.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Order.


        :param timestamp: The timestamp of this Order.
        :type timestamp: float
        """

        self._timestamp = timestamp

    @property
    def symbol(self):
        """Gets the symbol of this Order.


        :return: The symbol of this Order.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Order.


        :param symbol: The symbol of this Order.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def status(self):
        """Gets the status of this Order.


        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.
        :type status: str
        """

        self._status = status

    @property
    def side(self):
        """Gets the side of this Order.


        :return: The side of this Order.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Order.


        :param side: The side of this Order.
        :type side: str
        """

        self._side = side

    @property
    def order_type(self):
        """Gets the order_type of this Order.


        :return: The order_type of this Order.
        :rtype: object
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this Order.


        :param order_type: The order_type of this Order.
        :type order_type: object
        """

        self._order_type = order_type

    @property
    def quantity(self):
        """Gets the quantity of this Order.


        :return: The quantity of this Order.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Order.


        :param quantity: The quantity of this Order.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def time_in_force(self):
        """Gets the time_in_force of this Order.


        :return: The time_in_force of this Order.
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this Order.


        :param time_in_force: The time_in_force of this Order.
        :type time_in_force: str
        """

        self._time_in_force = time_in_force

    @property
    def price(self):
        """Gets the price of this Order.


        :return: The price of this Order.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Order.


        :param price: The price of this Order.
        :type price: int
        """

        self._price = price

    @property
    def stop_price(self):
        """Gets the stop_price of this Order.


        :return: The stop_price of this Order.
        :rtype: int
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this Order.


        :param stop_price: The stop_price of this Order.
        :type stop_price: int
        """

        self._stop_price = stop_price

    @property
    def optional_parameters(self):
        """Gets the optional_parameters of this Order.


        :return: The optional_parameters of this Order.
        :rtype: Dict[str, object]
        """
        return self._optional_parameters

    @optional_parameters.setter
    def optional_parameters(self, optional_parameters):
        """Sets the optional_parameters of this Order.


        :param optional_parameters: The optional_parameters of this Order.
        :type optional_parameters: Dict[str, object]
        """

        self._optional_parameters = optional_parameters
