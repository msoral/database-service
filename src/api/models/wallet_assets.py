# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.api.models.base_model_ import Model
from src.api import util


class WalletAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, quantity=None, cost=None):  # noqa: E501
        """WalletAssets - a model defined in OpenAPI

        :param name: The name of this WalletAssets.  # noqa: E501
        :type name: str
        :param quantity: The quantity of this WalletAssets.  # noqa: E501
        :type quantity: float
        :param cost: The cost of this WalletAssets.  # noqa: E501
        :type cost: float
        """
        self.openapi_types = {
            'name': str,
            'quantity': float,
            'cost': float
        }

        self.attribute_map = {
            'name': 'name',
            'quantity': 'quantity',
            'cost': 'cost'
        }

        self._name = name
        self._quantity = quantity
        self._cost = cost

    @classmethod
    def from_dict(cls, dikt) -> 'WalletAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Wallet_assets of this WalletAssets.  # noqa: E501
        :rtype: WalletAssets
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this WalletAssets.


        :return: The name of this WalletAssets.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WalletAssets.


        :param name: The name of this WalletAssets.
        :type name: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this WalletAssets.


        :return: The quantity of this WalletAssets.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this WalletAssets.


        :param quantity: The quantity of this WalletAssets.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def cost(self):
        """Gets the cost of this WalletAssets.


        :return: The cost of this WalletAssets.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this WalletAssets.


        :param cost: The cost of this WalletAssets.
        :type cost: float
        """

        self._cost = cost
