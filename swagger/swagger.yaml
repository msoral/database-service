openapi: 3.0.1
info:
  title: Database Service
  description: >
    Use this service to interact with the database. Always send the exchange name in the header of the request.
    All get/delete requests parameters are query parameters. All post/put request parameters are sent in the body of the request in json format.
  version: "1.0.0"
  contact:
    email: m.oral@blueflow.ai
servers:
  - url: localhost://12932/database_service/v1
tags:
  - name: asset
    description: All info about assets
  - name: order
    description: Fetch and create entries of given orders
  - name: wallet
    description: For fetching information about current holdings

# Paths supported by the server application
paths:
  /assets:
    get:
      tags:
        - asset
      operationId: database_service/asset.fetch_metadata
      summary: List assets of an exchange
      parameters:
        - $ref: "#/components/parameters/exchange"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assets"

  /assets/price:
    get:
      tags:
        - asset
      operationId: database_service/asset.fetch_price
      summary: Returns ochlv + market cap values for an asset.
      parameters:
        - $ref: "#/components/parameters/exchange"
        - $ref: "#/components/parameters/asset_id"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: "#/components/schemas/Asset"
        404:
          description: Did not find the specified asset id.

    post:
      tags:
        - asset
      operationId: database_service/asset.insert_price
      summary: Create a new asset object
      description: >
        **Warning**: This endpoint creates an entry in the database.
      requestBody:
        description: Placeholder description
        required: true
        content:
          application/json:
            schema:
             $ref: "#/components/schemas/Asset"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: number
                    format: float
                    description: Timestamp of the price data in milliseconds.
        400:
          description: Make sure all values are entered with correct dtypes.

  /assets/indicators:
    get:
      tags:
        - asset
      operationId: database_service/asset.fetch_indicators
      summary: Returns technical indicators of a given asset for the specified timeperiod.
      parameters:
        - $ref: "#/components/parameters/exchange"
        - $ref: "#/components/parameters/asset_id"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: "#/components/schemas/AssetIndicators"
        404:
          description: Did not find the specified asset id.

  /orders:
    post:
      tags:
        - order
      operationId: /database_service/order.insert_order
      summary: Create new order entry
      parameters:
        - $ref: "#/components/parameters/exchange"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        201:
          description: Created new order entry
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Autogenerated uuid for the order
        400:
          description: Bad request body

    get:
      tags:
        - order
      operationId: /database_service/order.fetch_order
      summary: Fetch order entry
      parameters:
        - $ref: "#/components/parameters/exchange"
        - $ref: "#/components/parameters/asset_id"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"

  /orders/by_id:
    get:
      tags:
        - order
      operationId: /database_service/order.fetch_order_by_id
      summary: Fetch order by its id
      parameters:
        - $ref: "#/components/parameters/exchange"
        - name: order id
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /wallet:
    get:
      tags:
        - wallet
      operationId: /database_service/wallet.fetch_holdings
      summary: Get current portfolio holdings
      responses:
        200:
          $ref: "#/components/responses/Wallet"

  /wallet/funds:
    get:
      tags:
        - wallet
      operationId: /database_service/wallet.fetch_funds
      summary: Get amount of available funds
      responses:
        200:
          $ref: "#/components/responses/SingleNumber"

  /wallet/total:
    get:
      tags:
        - wallet
      operationId: /database_service/wallet.fetch_total
      summary: Get dollar equavalent of current holdings.
      responses:
        200:
          $ref: "#/components/responses/SingleNumber"

components:
  parameters:
    exchange:
      name: exchange_name
      in: header
      required: True
      schema:
        type: string
        enum:
          - binance
          - interactiveBrokers

    asset_id:
      name: id
      in: query
      description: Use /assets endpoint to get the id of the asset.
      required: True
      schema:
        type: integer
        format: int64

    start_date:
      name: start_date
      in: query
      schema:
        type: string
        format: date
      description: >
        Must be used together with `end_date`.

    end_date:
      name: end_date
      in: query
      schema:
        type: string
        format: date
      description: >
        Must be used together with `start_date`.

  schemas:
    Assets:
      type: array
      items:
        $ref: "#/components/schemas/AssetMetadata"


    AssetMetadata:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ticker:
          type:
            string
        website:
          type: string
        social_links:
          type: object
          additionalProperties:
            type: string
          example:
            twitter: ""
            reddit: ""
            facebook: ""

    Asset:
      type: object
      description: Use `GET /assets` to find asset id.
      properties:
        timestamp:
          type: number
          format: float
          example: 1616414075.621394
        assetId:
          type: integer
          format: int64
          example: 1 # Bitcoin for binance exchange
        open:
          type: number
          format: float
          example: 45832.12
        close:
          type: number
          format: float
          example: 46132.12
        high:
          type: number
          format: float
          example: 48132.12
        low:
          type: number
          format: float
          example: 40122.12
        volume:
          type: number
          format: float
          example: 52,315,960,906
        marketcap:
          type: number
          format: float
          example: 1,081,744,124,778

    AssetIndicators:
      type: object
      properties:
        timestamp:
          type: number
          format: float
          example: 1616414075.621394
        assetId:
          type: integer
          format: int64
          example: 1 # Bitcoin for binance exchange
      additionalProperties:
        type: number
        format: float

    Orders:
      type: object
      properties:
        ticker:
          type: string
          example: TSLA
      additionalProperties:
        $ref: "#/components/schemas/Order"

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Autogenerated uuid of the order
        timestamp:
          type: number
          format: float
        symbol:
          type: string
        status:
          type: string
        side:
          type: string
        order_type:
          type: object
        quantity:
          type: number
        timeInForce:
          type: string
        price:
          type: integer
        stop_price:
          type: integer
        optional_parameters:
          type: object
          additionalProperties: true


  responses:
    Wallet:
      description: All quantities are in their respective asset
      content:
        application/json:
          schema:
            type: object
            properties:
              timestamp:
                type: number
                format: float
              assets:
                type: array
                items:
                  type: object
                  properties:
                    ticker:
                      type: string
                    quantity:
                      type: number
                      format: double


    SingleNumber:
      description: Requested data is in USD
      content:
        application/json:
          schema:
            type: number
            format: float
            example: 18203.50



